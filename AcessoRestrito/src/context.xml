<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd


			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">

	<!-- SPRING SETUP -->

	<!-- Load properties so we can easily change them -->
	<context:property-placeholder location="classpath:application.properties" />

	<!-- Enable Annotation Configuration in order to automatically scan controllers -->
	<context:annotation-config />

	<!-- Allow @Transactional annotations for transaction management -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Search for Rest Resources and configure them automatically -->
	<context:component-scan
		base-package="acessorestrito.angularrestspringsecurity.rest.resources" />

	<!-- DATABASE SETUP -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="driverClassName" value="${db.driver}" />
		<property name="url" value="${db.url}" />
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="examplePU" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="showSql" value="true" />
			</bean>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>


	<bean id="userDao"
		class="acessorestrito.angularrestspringsecurity.dao.user.JpaUserDao">
	</bean>

	<bean id="accessTokenDao"
		class="acessorestrito.angularrestspringsecurity.dao.accesstoken.JpaAccessTokenDao">
	</bean>

	<bean id="userService"
		class="acessorestrito.angularrestspringsecurity.service.DaoUserService">
		<constructor-arg ref="userDao" />
		<constructor-arg ref="accessTokenDao" />
	</bean>

	<bean id="dataBaseInitializer"
		class="acessorestrito.angularrestspringsecurity.dao.DataBaseInitializer"
		init-method="initDataBase">
		<constructor-arg ref="userDao" />

		<constructor-arg ref="passwordEncoder" />
	</bean>

	<!-- INIT REST COMPONENTS -->

	<bean id="objectMapper" class="org.codehaus.jackson.map.ObjectMapper" />

	<!-- SPRING SECURITY SETUP -->

	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.password.StandardPasswordEncoder">
		<constructor-arg value="${db.password}" />
	</bean>

	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider
			user-service-ref="userService">
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>

	<security:http entry-point-ref="unauthorizedEntryPoint"
		authentication-manager-ref="authenticationManager" create-session="stateless">
		<security:csrf disabled="true" />
		<security:custom-filter ref="authenticationTokenProcessingFilter"
			position="PRE_AUTH_FILTER" />
		<security:intercept-url pattern="/rest/user/authenticate"
			access="permitAll" />
		<security:intercept-url method="GET"
			pattern="/rest/user/ObterRoles" access="hasRole('ADMIN')" />
		<security:intercept-url method="GET"
			pattern="/rest/user/ObterRolesUsuario" access="hasRole('ADMIN')" />
		<security:intercept-url method="POST"
			pattern="/rest/user/AddRoles" access="hasRole('ADMIN')" />
		<security:intercept-url method="GET"
			pattern="/rest/user/list/" access="hasRole('ADMIN')" />
		<security:intercept-url method="POST"
			pattern="/rest/user/list/" access="hasRole('ADMIN')" />
		<security:intercept-url method="POST"
			pattern="/rest/user/Alteracao" access="hasRole('ADMIN')" />
	</security:http>

	<bean id="unauthorizedEntryPoint"
		class="acessorestrito.angularrestspringsecurity.rest.UnauthorizedEntryPoint" />

	<bean id="authenticationTokenProcessingFilter"
		class="acessorestrito.angularrestspringsecurity.rest.AuthenticationTokenProcessingFilter">
		<constructor-arg ref="userService" />
	</bean>

</beans>